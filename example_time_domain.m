%Example time-domain simulation of elastic waves using BristolFE
restoredefaultpath;
clear; 
close all;

%Material properties (SI units used throughout)
youngs_modulus = 70e9;
poissons_ratio = 1/3;
density = 2700;
stress_state = 'plane strain';
stress_state = 'plane stress';

thickness = 10e-3;

%Details of excitation - a Hanning-windowed toneburst
centre_freq = 5e6;
number_of_cycles = 4;
excitation_point = [0, 0] * thickness; %centre of bottom of L-shape
excitation_dir = 2; %vertical forcing

%As well as a pretty animation, we could also monitor displacement of one
%(or more) nodes over course of analysis
monitoring_point = [0, 0.5] * thickness; %halfway through plate
monitoring_dir = 2;

%Element size determined by wavelength
elements_per_wavelength = 10;

%Safety factor for time-steps
safety_factor = 4;

%How long to run model for - e.g. 20 x period of excitation
max_time = 1 / centre_freq * 5;

%Define shape of a 2D structure - a section through a plate of specified
%thickness
corner_points = [
    -1, 0
    -1, 1
    1, 1
    1, 0
    ] * thickness;

%To save time plotting
plot_frames_per_cycle = 4;
%--------------------------------------------------------------------------

%Work out required element size and time step (based on wavelength of bulk
%longitudinal waves at centre frequency of excitation)
wave_vel = sqrt(youngs_modulus/density * (1-poissons_ratio) / (1+poissons_ratio) / (1-2*poissons_ratio)); %Textbook equation for bulk longitudinal wave speed
wavelength = wave_vel / centre_freq;
element_size = wavelength / elements_per_wavelength;

%Work out time step
time_step = element_size / wave_vel / safety_factor;

%Mesh shape with triangular elements of appropriate size
addpath('Mesh2d v24');
hdata.hmax = element_size;
options.output = false;
[nodes, elements] = mesh2d(corner_points, [], hdata, options);

%Work out excitation signal
time = [0: time_step: max_time];
ct = number_of_cycles / centre_freq / 2;
excitation_signal = sin(2 * pi * centre_freq * (time - ct)) .* ...
    (1 + cos(2 * pi * centre_freq * (time - ct) / number_of_cycles)) / 2 .* ...
    (time <= number_of_cycles / centre_freq);
excitation_node = fn_find_node_at_point(nodes, excitation_point, inf);

monitoring_node = fn_find_node_at_point(nodes, monitoring_point, inf);

%Display mesh and excitation signal
figure;
display_options.node_sets_to_plot(1).nd = excitation_node;
display_options.node_sets_to_plot(1).col = 'r.';
display_options.node_sets_to_plot(2).nd = monitoring_node;
display_options.node_sets_to_plot(2).col = 'g.';
subplot(1,2,1);
fn_display_result(nodes, elements, display_options);
title('Original mesh');

subplot(1,2,2);
plot(time, excitation_signal);
title('Excitation signal');

%An n x 1 matrix defining the material of each element (here they are all
%the material number 1, so all entries in this matrix are 1)
element_materials = ones(size(elements, 1), 1);

materials(1).density = density;
switch stress_state
    case 'plane stress'
        materials(1).stiffness_matrix = fn_isotropic_plane_stress_stiffness_matrix(youngs_modulus, poissons_ratio);
    case 'plane strain'
        materials(1).stiffness_matrix = fn_isotropic_plane_strain_stiffness_matrix(youngs_modulus, poissons_ratio);
end

%FIRST BIT OF FE CALCULATION - Build global matrices
[K, M, Q] = fn_build_global_matrices(nodes, elements, element_materials, materials);
% C = zeros(size(K)); %C is a damping matrix - not currently generated by version of BristolFE you have
fprintf('Size of model: %i DOF\n', size(K, 1));


%SECOND BIT OF FE CALCULATION - Time marching bit
plot_nth_frame = ceil(1 / centre_freq / plot_frames_per_cycle / time_step);
u_previous = zeros(size(K, 1), 1);
u_dot_previous = zeros(size(K, 1), 1);

%a bit of a bodge to find index of excitation node/direction in global
%matrices ...
f = zeros(size(nodes)); f(excitation_node, excitation_dir) = 1; f = reshape(f', size(K, 1),[]);
excitation_index = find(f);
%same form monitoring point
u = zeros(size(nodes)); u(monitoring_node, monitoring_dir) = 1; u = reshape(u', size(K, 1),[]);
monitoring_index = find(u);
monitoring_node_disp = NaN(size(time));

figure;
for ti = 1:length(time)
    %set force at forcing node equal to excitation signal at this instant
    %in time
    f(excitation_index) = excitation_signal(ti);
    %work out acceleration
    u_dot_dot_previous = M \ (f - K * u_previous);
    %work out velocity
    u_dot = u_dot_previous + time_step * u_dot_dot_previous;
    %work out displacement at next time step
    u = u_previous + time_step * u_dot;
    
    %output to time history vector
    monitoring_node_disp(ti) = u(monitoring_index);
    subplot(1,2,2);
    plot(time, monitoring_node_disp);
    ylim([-1, 1] * 5e-13);
    xlim([0, max_time]);
    title('Displacement history');
    
    %only display image if this is a frame to be plotted to save time
    if ~rem(ti, plot_nth_frame)
        subplot(1,2,1);
        options.plot_what = 'mag';
        display_options.element_edge_color = 'None';
        display_options.scale_factor = 1;
        u_tmp = reshape(u, 2, [])';
        [sigma_11, sigma_22, sigma_12] = fn_stress_from_disp(Q, u_tmp);
        element_colour = sqrt(sigma_11 .^ 2 + sigma_22 .^ 2);
        fn_display_result(nodes, elements, display_options, zeros(size(u_tmp)), element_colour)
        colorbar;
        caxis([0, 3]);
        title('Stress field');
    end
    pause(0.001);
    u_previous = u;
    u_dot_previous = u_dot;
end